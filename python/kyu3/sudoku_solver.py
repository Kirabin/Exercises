# https://www.codewars.com/kata/5296bc77afba8baa690002d7

def cell_possibilities(puzzle, i, j):
	# get possible values that can be put on puzzle[i][j]

	possible = set(range(1,10))
	occupied = set(puzzle[i]) # horizontal
	occupied.update(list(zip(*puzzle))[j]) # vertical

	cube_i = i // 3 * 3
	cube_j = j // 3 * 3
	for i in range(cube_i, cube_i + 3):
		for j in range(cube_j, cube_j + 3):
			occupied.add(puzzle[i][j]) # cube

	return possible - occupied


def sudoku(puzzle, i = 0, j = 0):
	# print('\n', *puzzle, (i, j), sep="\n")
	if i > 8:
		return puzzle

	if puzzle[i][j] != 0:
		return sudoku(puzzle, i + (j + 1) // 9, (j + 1) % 9)

	else:
		possib = cell_possibilities(puzzle, i, j)
		if not possib:
			return None

		sol = None
		for variant in possib:
			puzzle[i][j] = variant
			sol = sudoku(puzzle, i + (j + 1) // 9, (j + 1) % 9)
			if sol:
				return sol
		puzzle[i][j] = 0 
		return sol


puzzle = [[5,3,0,0,7,0,0,0,0], [6,0,0,1,9,5,0,0,0], [0,9,8,0,0,0,0,6,0], [8,0,0,0,6,0,0,0,3], [4,0,0,8,0,3,0,0,1], [7,0,0,0,2,0,0,0,6], [0,6,0,0,0,0,2,8,0], [0,0,0,4,1,9,0,0,5], [0,0,0,0,8,0,0,7,9]]
solution = [[5,3,4,6,7,8,9,1,2], [6,7,2,1,9,5,3,4,8], [1,9,8,3,4,2,5,6,7], [8,5,9,7,6,1,4,2,3], [4,2,6,8,5,3,7,9,1], [7,1,3,9,2,4,8,5,6], [9,6,1,5,3,7,2,8,4], [2,8,7,4,1,9,6,3,5], [3,4,5,2,8,6,1,7,9]]
assert sudoku(puzzle) == solution

puzzle = [[9, 0, 0, 0, 8, 0, 0, 0, 1], [0, 0, 0, 4, 0, 6, 0, 0, 0], [0, 0, 5, 0, 7, 0, 3, 0, 0], [0, 6, 0, 0, 0, 0, 0, 4, 0], [4, 0, 1, 0, 6, 0, 5, 0, 8], [0, 9, 0, 0, 0, 0, 0, 2, 0], [0, 0, 7, 0, 3, 0, 2, 0, 0], [0, 0, 0, 7, 0, 5, 0, 0, 0], [1, 0, 0, 0, 4, 0, 0, 0, 7]]
solution = [[9, 2, 6, 5, 8, 3, 4, 7, 1], [7, 1, 3, 4, 2, 6, 9, 8, 5], [8, 4, 5, 9, 7, 1, 3, 6, 2], [3, 6, 2, 8, 5, 7, 1, 4, 9], [4, 7, 1, 2, 6, 9, 5, 3, 8], [5, 9, 8, 3, 1, 4, 7, 2, 6], [6, 5, 7, 1, 3, 8, 2, 9, 4], [2, 8, 4, 7, 9, 5, 6, 1, 3], [1, 3, 9, 6, 4, 2, 8, 5, 7]]
assert sudoku(puzzle) == solution

puzzle = [[0, 0, 5, 0, 0, 0, 8, 0, 0], [0, 2, 0, 8, 0, 9, 0, 7, 0], [3, 0, 0, 0, 4, 0, 0, 0, 1], [0, 3, 0, 2, 0, 6, 0, 1, 0], [0, 0, 2, 0, 0, 0, 5, 0, 0], [0, 7, 0, 5, 0, 4, 0, 6, 0], [2, 0, 0, 0, 6, 0, 0, 0, 4], [0, 8, 0, 4, 0, 2, 0, 9, 0], [0, 0, 7, 0, 0, 0, 2, 0, 0]]
solution = [[7, 1, 5, 6, 2, 3, 8, 4, 9], [6, 2, 4, 8, 1, 9, 3, 7, 5], [3, 9, 8, 7, 4, 5, 6, 2, 1], [5, 3, 9, 2, 7, 6, 4, 1, 8], [4, 6, 2, 1, 9, 8, 5, 3, 7], [8, 7, 1, 5, 3, 4, 9, 6, 2], [2, 5, 3, 9, 6, 7, 1, 8, 4], [1, 8, 6, 4, 5, 2, 7, 9, 3], [9, 4, 7, 3, 8, 1, 2, 5, 6]]
assert sudoku(puzzle) == solution

puzzle = [[0, 0, 7, 0, 0, 5, 0, 0, 3], [0, 3, 0, 0, 9, 0, 0, 4, 0], [9, 0, 0, 1, 0, 0, 8, 0, 0], [4, 0, 0, 6, 0, 0, 5, 0, 0], [0, 7, 0, 0, 3, 0, 0, 1, 0], [0, 0, 5, 0, 0, 9, 0, 0, 6], [0, 0, 4, 0, 0, 7, 0, 0, 2], [0, 8, 0, 0, 2, 0, 0, 5, 0], [2, 0, 0, 8, 0, 0, 4, 0, 0]]
solution = [[8, 4, 7, 2, 6, 5, 1, 9, 3], [1, 3, 6, 7, 9, 8, 2, 4, 5], [9, 5, 2, 1, 4, 3, 8, 6, 7], [4, 2, 9, 6, 7, 1, 5, 3, 8], [6, 7, 8, 5, 3, 2, 9, 1, 4], [3, 1, 5, 4, 8, 9, 7, 2, 6], [5, 6, 4, 9, 1, 7, 3, 8, 2], [7, 8, 1, 3, 2, 4, 6, 5, 9], [2, 9, 3, 8, 5, 6, 4, 7, 1]]
assert sudoku(puzzle) == solution

puzzle = [list(map(int, "4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......".replace(".", "0")[i: i + 9])) for i in range(0,9)]
print(sudoku(puzzle))



